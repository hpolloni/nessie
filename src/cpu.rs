use assert_matches::debug_assert_matches;

use bitflags::bitflags;

use crate::bus::Bus;

#[derive(Debug, Clone, Copy)]
enum Address {
    Implied,
    Absolute(u16),
    Relative(u8),
}

#[derive(Debug, Copy, Clone)]
enum AddressingMode {
    Absolute,
    AbsoluteX,
    AbsoluteY,
    Implied,
    Immediate,
    ZeroPage,
    ZeroPageX,
    ZeroPageY,
    Relative,
    IndirectX,
    IndirectY,
    Indirect,
}

#[derive(Debug, Copy, Clone)]
struct OpCode {
    execute: fn(&mut CPU, Address),
    name: &'static str,
    addressing: AddressingMode,
    cycles: u8,
}

impl OpCode {
    fn len(&self) -> u16 {
        match self.addressing {
            AddressingMode::Absolute
            | AddressingMode::AbsoluteY
            | AddressingMode::AbsoluteX
            | AddressingMode::Indirect => 3,

            AddressingMode::Immediate
            | AddressingMode::ZeroPage
            | AddressingMode::ZeroPageX
            | AddressingMode::Relative
            | AddressingMode::IndirectX
            | AddressingMode::IndirectY
            | AddressingMode::ZeroPageY => 2,

            AddressingMode::Implied => 1,
        }
    }
}
// Autogenerated from opcode_table_generator.py
static OPCODE_TABLE: [OpCode; 256] = [
    // Opcode: 0x00
    OpCode {
        execute: CPU::brk,
        name: "BRK",
        addressing: AddressingMode::Implied,
        cycles: 7,
    },
    // Opcode: 0x01
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x01
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x03
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::IndirectX,
        cycles: 8,
    },
    // Opcode: 0x04
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x05
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x06
    OpCode {
        execute: CPU::asl,
        name: "ASL",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x07
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x08
    OpCode {
        execute: CPU::php,
        name: "PHP",
        addressing: AddressingMode::Implied,
        cycles: 3,
    },
    // Opcode: 0x09
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x0A
    OpCode {
        execute: CPU::asl,
        name: "ASL",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x0B
    OpCode {
        execute: CPU::anc,
        name: "ANC",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x0C
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x0D
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x0E
    OpCode {
        execute: CPU::asl,
        name: "ASL",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x0F
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x10
    OpCode {
        execute: CPU::bpl,
        name: "BPL",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0x11
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x11
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x13
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::IndirectY,
        cycles: 8,
    },
    // Opcode: 0x14
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x15
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x16
    OpCode {
        execute: CPU::asl,
        name: "ASL",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x17
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x18
    OpCode {
        execute: CPU::clc,
        name: "CLC",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x19
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0x1A
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x1B
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::AbsoluteY,
        cycles: 7,
    },
    // Opcode: 0x1C
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x1D
    OpCode {
        execute: CPU::ora,
        name: "ORA",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x1E
    OpCode {
        execute: CPU::asl,
        name: "ASL",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x1F
    OpCode {
        execute: CPU::slo,
        name: "SLO",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x20
    OpCode {
        execute: CPU::jsr,
        name: "JSR",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x21
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x21
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x23
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::IndirectX,
        cycles: 8,
    },
    // Opcode: 0x24
    OpCode {
        execute: CPU::bit,
        name: "BIT",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x25
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x26
    OpCode {
        execute: CPU::rol,
        name: "ROL",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x27
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x28
    OpCode {
        execute: CPU::plp,
        name: "PLP",
        addressing: AddressingMode::Implied,
        cycles: 4,
    },
    // Opcode: 0x29
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x2A
    OpCode {
        execute: CPU::rol,
        name: "ROL",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x2B
    OpCode {
        execute: CPU::anc,
        name: "ANC",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x2C
    OpCode {
        execute: CPU::bit,
        name: "BIT",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x2D
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x2E
    OpCode {
        execute: CPU::rol,
        name: "ROL",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x2F
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x30
    OpCode {
        execute: CPU::bmi,
        name: "BMI",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0x31
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x31
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x33
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::IndirectY,
        cycles: 8,
    },
    // Opcode: 0x34
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x35
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x36
    OpCode {
        execute: CPU::rol,
        name: "ROL",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x37
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x38
    OpCode {
        execute: CPU::sec,
        name: "SEC",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x39
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0x3A
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x3B
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::AbsoluteY,
        cycles: 7,
    },
    // Opcode: 0x3C
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x3D
    OpCode {
        execute: CPU::and,
        name: "AND",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x3E
    OpCode {
        execute: CPU::rol,
        name: "ROL",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x3F
    OpCode {
        execute: CPU::rla,
        name: "RLA",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x40
    OpCode {
        execute: CPU::rti,
        name: "RTI",
        addressing: AddressingMode::Implied,
        cycles: 6,
    },
    // Opcode: 0x41
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x41
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x43
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::IndirectX,
        cycles: 8,
    },
    // Opcode: 0x44
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x45
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x46
    OpCode {
        execute: CPU::lsr,
        name: "LSR",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x47
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x48
    OpCode {
        execute: CPU::pha,
        name: "PHA",
        addressing: AddressingMode::Implied,
        cycles: 3,
    },
    // Opcode: 0x49
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x4A
    OpCode {
        execute: CPU::lsr,
        name: "LSR",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x4B
    OpCode {
        execute: CPU::alr,
        name: "ALR",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x4C
    OpCode {
        execute: CPU::jmp,
        name: "JMP",
        addressing: AddressingMode::Absolute,
        cycles: 3,
    },
    // Opcode: 0x4D
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x4E
    OpCode {
        execute: CPU::lsr,
        name: "LSR",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x4F
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x50
    OpCode {
        execute: CPU::bvc,
        name: "BVC",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0x51
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x51
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x53
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::IndirectY,
        cycles: 8,
    },
    // Opcode: 0x54
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x55
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x56
    OpCode {
        execute: CPU::lsr,
        name: "LSR",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x57
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x58
    OpCode {
        execute: CPU::cli,
        name: "CLI",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x59
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0x5A
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x5B
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::AbsoluteY,
        cycles: 7,
    },
    // Opcode: 0x5C
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x5D
    OpCode {
        execute: CPU::eor,
        name: "EOR",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x5E
    OpCode {
        execute: CPU::lsr,
        name: "LSR",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x5F
    OpCode {
        execute: CPU::sre,
        name: "SRE",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x60
    OpCode {
        execute: CPU::rts,
        name: "RTS",
        addressing: AddressingMode::Implied,
        cycles: 6,
    },
    // Opcode: 0x61
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x61
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x63
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::IndirectX,
        cycles: 8,
    },
    // Opcode: 0x64
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x65
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x66
    OpCode {
        execute: CPU::ror,
        name: "ROR",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x67
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0x68
    OpCode {
        execute: CPU::pla,
        name: "PLA",
        addressing: AddressingMode::Implied,
        cycles: 4,
    },
    // Opcode: 0x69
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x6A
    OpCode {
        execute: CPU::ror,
        name: "ROR",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x6B
    OpCode {
        execute: CPU::arr,
        name: "ARR",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x6C
    OpCode {
        execute: CPU::jmp,
        name: "JMP",
        addressing: AddressingMode::Indirect,
        cycles: 5,
    },
    // Opcode: 0x6D
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x6E
    OpCode {
        execute: CPU::ror,
        name: "ROR",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x6F
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0x70
    OpCode {
        execute: CPU::bvs,
        name: "BVS",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0x71
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x71
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0x73
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::IndirectY,
        cycles: 8,
    },
    // Opcode: 0x74
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x75
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x76
    OpCode {
        execute: CPU::ror,
        name: "ROR",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x77
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0x78
    OpCode {
        execute: CPU::sei,
        name: "SEI",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x79
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0x7A
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x7B
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::AbsoluteY,
        cycles: 7,
    },
    // Opcode: 0x7C
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x7D
    OpCode {
        execute: CPU::adc,
        name: "ADC",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0x7E
    OpCode {
        execute: CPU::ror,
        name: "ROR",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x7F
    OpCode {
        execute: CPU::rra,
        name: "RRA",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0x80
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x81
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x82
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x83
    OpCode {
        execute: CPU::sax,
        name: "SAX",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0x84
    OpCode {
        execute: CPU::sty,
        name: "STY",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x85
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x86
    OpCode {
        execute: CPU::stx,
        name: "STX",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x87
    OpCode {
        execute: CPU::sax,
        name: "SAX",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0x88
    OpCode {
        execute: CPU::dey,
        name: "DEY",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x89
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x8A
    OpCode {
        execute: CPU::txa,
        name: "TXA",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x8B
    OpCode {
        execute: CPU::xaa,
        name: "XAA",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0x8C
    OpCode {
        execute: CPU::sty,
        name: "STY",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x8D
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x8E
    OpCode {
        execute: CPU::stx,
        name: "STX",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x8F
    OpCode {
        execute: CPU::sax,
        name: "SAX",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0x90
    OpCode {
        execute: CPU::bcc,
        name: "BCC",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0x91
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::IndirectY,
        cycles: 6,
    },
    // Opcode: 0x91
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::IndirectY,
        cycles: 6,
    },
    // Opcode: 0x93
    OpCode {
        execute: CPU::ahx,
        name: "AHX",
        addressing: AddressingMode::IndirectY,
        cycles: 6,
    },
    // Opcode: 0x94
    OpCode {
        execute: CPU::sty,
        name: "STY",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x95
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0x96
    OpCode {
        execute: CPU::stx,
        name: "STX",
        addressing: AddressingMode::ZeroPageY,
        cycles: 4,
    },
    // Opcode: 0x97
    OpCode {
        execute: CPU::sax,
        name: "SAX",
        addressing: AddressingMode::ZeroPageY,
        cycles: 4,
    },
    // Opcode: 0x98
    OpCode {
        execute: CPU::tya,
        name: "TYA",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x99
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::AbsoluteY,
        cycles: 5,
    },
    // Opcode: 0x9A
    OpCode {
        execute: CPU::txs,
        name: "TXS",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0x9B
    OpCode {
        execute: CPU::tas,
        name: "TAS",
        addressing: AddressingMode::AbsoluteY,
        cycles: 5,
    },
    // Opcode: 0x9C
    OpCode {
        execute: CPU::shy,
        name: "SHY",
        addressing: AddressingMode::AbsoluteX,
        cycles: 5,
    },
    // Opcode: 0x9D
    OpCode {
        execute: CPU::sta,
        name: "STA",
        addressing: AddressingMode::AbsoluteX,
        cycles: 5,
    },
    // Opcode: 0x9E
    OpCode {
        execute: CPU::shx,
        name: "SHX",
        addressing: AddressingMode::AbsoluteY,
        cycles: 5,
    },
    // Opcode: 0x9F
    OpCode {
        execute: CPU::ahx,
        name: "AHX",
        addressing: AddressingMode::AbsoluteY,
        cycles: 5,
    },
    // Opcode: 0xA0
    OpCode {
        execute: CPU::ldy,
        name: "LDY",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xA1
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0xA2
    OpCode {
        execute: CPU::ldx,
        name: "LDX",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xA3
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0xA4
    OpCode {
        execute: CPU::ldy,
        name: "LDY",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xA5
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xA6
    OpCode {
        execute: CPU::ldx,
        name: "LDX",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xA7
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xA8
    OpCode {
        execute: CPU::tay,
        name: "TAY",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xA9
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xAA
    OpCode {
        execute: CPU::tax,
        name: "TAX",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xAB
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xAC
    OpCode {
        execute: CPU::ldy,
        name: "LDY",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xAD
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xAE
    OpCode {
        execute: CPU::ldx,
        name: "LDX",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xAF
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xB0
    OpCode {
        execute: CPU::bcs,
        name: "BCS",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0xB1
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xB1
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xB3
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xB4
    OpCode {
        execute: CPU::ldy,
        name: "LDY",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0xB5
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0xB6
    OpCode {
        execute: CPU::ldx,
        name: "LDX",
        addressing: AddressingMode::ZeroPageY,
        cycles: 4,
    },
    // Opcode: 0xB7
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::ZeroPageY,
        cycles: 4,
    },
    // Opcode: 0xB8
    OpCode {
        execute: CPU::clv,
        name: "CLV",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xB9
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0xBA
    OpCode {
        execute: CPU::tsx,
        name: "TSX",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xBB
    OpCode {
        execute: CPU::las,
        name: "LAS",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0xBC
    OpCode {
        execute: CPU::ldy,
        name: "LDY",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0xBD
    OpCode {
        execute: CPU::lda,
        name: "LDA",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0xBE
    OpCode {
        execute: CPU::ldx,
        name: "LDX",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0xBF
    OpCode {
        execute: CPU::lax,
        name: "LAX",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0xC0
    OpCode {
        execute: CPU::cpy,
        name: "CPY",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xC1
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0xC2
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xC3
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::IndirectX,
        cycles: 8,
    },
    // Opcode: 0xC4
    OpCode {
        execute: CPU::cpy,
        name: "CPY",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xC5
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xC6
    OpCode {
        execute: CPU::dec,
        name: "DEC",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0xC7
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0xC8
    OpCode {
        execute: CPU::iny,
        name: "INY",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xC9
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xCA
    OpCode {
        execute: CPU::dex,
        name: "DEX",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xCB
    OpCode {
        execute: CPU::axs,
        name: "AXS",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xCC
    OpCode {
        execute: CPU::cpy,
        name: "CPY",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xCD
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xCE
    OpCode {
        execute: CPU::dec,
        name: "DEC",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0xCF
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0xD0
    OpCode {
        execute: CPU::bne,
        name: "BNE",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0xD1
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xD1
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xD3
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::IndirectY,
        cycles: 8,
    },
    // Opcode: 0xD4
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0xD5
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0xD6
    OpCode {
        execute: CPU::dec,
        name: "DEC",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0xD7
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0xD8
    OpCode {
        execute: CPU::cld,
        name: "CLD",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xD9
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0xDA
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xDB
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::AbsoluteY,
        cycles: 7,
    },
    // Opcode: 0xDC
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0xDD
    OpCode {
        execute: CPU::cmp,
        name: "CMP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0xDE
    OpCode {
        execute: CPU::dec,
        name: "DEC",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0xDF
    OpCode {
        execute: CPU::dcp,
        name: "DCP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0xE0
    OpCode {
        execute: CPU::cpx,
        name: "CPX",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xE1
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::IndirectX,
        cycles: 6,
    },
    // Opcode: 0xE2
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xE3
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::IndirectX,
        cycles: 8,
    },
    // Opcode: 0xE4
    OpCode {
        execute: CPU::cpx,
        name: "CPX",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xE5
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::ZeroPage,
        cycles: 3,
    },
    // Opcode: 0xE6
    OpCode {
        execute: CPU::inc,
        name: "INC",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0xE7
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::ZeroPage,
        cycles: 5,
    },
    // Opcode: 0xE8
    OpCode {
        execute: CPU::inx,
        name: "INX",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xE9
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xEA
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xEB
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::Immediate,
        cycles: 2,
    },
    // Opcode: 0xEC
    OpCode {
        execute: CPU::cpx,
        name: "CPX",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xED
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::Absolute,
        cycles: 4,
    },
    // Opcode: 0xEE
    OpCode {
        execute: CPU::inc,
        name: "INC",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0xEF
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::Absolute,
        cycles: 6,
    },
    // Opcode: 0xF0
    OpCode {
        execute: CPU::beq,
        name: "BEQ",
        addressing: AddressingMode::Relative,
        cycles: 2,
    },
    // Opcode: 0xF1
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xF1
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::IndirectY,
        cycles: 5,
    },
    // Opcode: 0xF3
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::IndirectY,
        cycles: 8,
    },
    // Opcode: 0xF4
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0xF5
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::ZeroPageX,
        cycles: 4,
    },
    // Opcode: 0xF6
    OpCode {
        execute: CPU::inc,
        name: "INC",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0xF7
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::ZeroPageX,
        cycles: 6,
    },
    // Opcode: 0xF8
    OpCode {
        execute: CPU::sed,
        name: "SED",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xF9
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::AbsoluteY,
        cycles: 4,
    },
    // Opcode: 0xFA
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::Implied,
        cycles: 2,
    },
    // Opcode: 0xFB
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::AbsoluteY,
        cycles: 7,
    },
    // Opcode: 0xFC
    OpCode {
        execute: CPU::nop,
        name: "NOP",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0xFD
    OpCode {
        execute: CPU::sbc,
        name: "SBC",
        addressing: AddressingMode::AbsoluteX,
        cycles: 4,
    },
    // Opcode: 0xFE
    OpCode {
        execute: CPU::inc,
        name: "INC",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
    // Opcode: 0xFF
    OpCode {
        execute: CPU::isc,
        name: "ISC",
        addressing: AddressingMode::AbsoluteX,
        cycles: 7,
    },
];

bitflags! {
    #[derive(Copy, Clone, Debug)]
    struct StatusFlags: u8 {
        const C = 1;
        const Z = 1 << 1;
        const I = 1 << 2;
        const D = 1 << 3;
        const B = 1 << 4;
        const X = 1 << 5;
        const O = 1 << 6;
        const N = 1 << 7;
    }
}

pub struct CPU {
    accumulator: u8,
    x_register: u8,
    y_register: u8,
    program_counter: u16,
    remaining_cycles: u8,
    pub bus: Box<dyn Bus>,
    status: StatusFlags,
    total_cycles: u64,
    stack_pointer: u8,
}

impl CPU {
    pub fn new(pc: u16, bus: Box<dyn Bus>) -> Self {
        Self {
            accumulator: 0x00,
            x_register: 0x00,
            y_register: 0x00,
            program_counter: pc,
            remaining_cycles: 0,
            total_cycles: 0,
            stack_pointer: 0xfd,
            bus,
            status: StatusFlags::from_bits_truncate(0x24),
        }
    }

    fn cycle(&mut self) {
        if self.remaining_cycles == 0 {
            let opcode = self.bus.read(self.program_counter);

            self.program_counter += 1;

            let op = OPCODE_TABLE[opcode as usize];

            let address = self.resolve_address(op.addressing);

            self.program_counter += op.len() - 1;

            (op.execute)(self, address);

            self.remaining_cycles += op.cycles;
        }
        self.total_cycles += 1;
        self.remaining_cycles -= 1;
    }

    pub fn step(&mut self) {
        self.cycle();
        while self.remaining_cycles != 0 {
            self.cycle();
        }
    }

    pub fn run_until_brk(&mut self) {
        while !self.status.contains(StatusFlags::B) {
            self.step()
        }
    }

    fn set_zero_or_neg_flags(&mut self, value: u8) {
        self.status.set(StatusFlags::Z, value == 0);
        self.status
            .set(StatusFlags::N, value & StatusFlags::N.bits() != 0);
    }

    pub fn trace(&self) -> String {
        let opcode = self.bus.read(self.program_counter);

        let op = OPCODE_TABLE[opcode as usize];

        let hexdump = self.hexdump(self.program_counter, self.program_counter + op.len());

        let asm = format!("{}{:28}", op.name, " ");
        let ppu = " ".repeat(11);
        format!(
            "{:04X}  {:9} {} A:{:02X} X:{:02X} Y:{:02X} P:{:02X} SP:{:02X} {} CYC:{}",
            self.program_counter,
            hexdump,
            asm,
            self.accumulator,
            self.x_register,
            self.y_register,
            self.status.bits(),
            self.stack_pointer,
            ppu,
            self.total_cycles + 7
        ) // TODO figure this out
    }

    // TODO: consider if this should be in the Bus trait instead
    fn hexdump(&self, start: u16, end: u16) -> String {
        let mut hexdump = String::new();
        for addr in start..end {
            hexdump.push_str(&format!("{:02X} ", self.bus.read(addr)));
        }
        hexdump
    }
}

fn s8_to_u16(value: u8) -> u16 {
    let mut value = u16::from(value);
    if value & 0x80 > 0 {
        value |= 0xff00;
    }
    return value;
}

const STACK_PAGE: u16 = 0x0100;

// Operations
impl CPU {
    fn adc(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);
            let carry = self.status.contains(StatusFlags::C) as u16;
            let result: u16 = u16::from(self.accumulator) + u16::from(value) + carry;
            let result_u8 = result as u8;

            self.status.set(StatusFlags::C, result > u16::from(u8::max_value()));
            self.status.set(
                StatusFlags::O,
                (!(self.accumulator ^ value)
                    & (self.accumulator ^ result_u8)
                    & StatusFlags::N.bits())
                    > 0,
            );
            self.set_zero_or_neg_flags(result_u8);

            self.accumulator = result_u8;
        });
    }

    fn ahx(&mut self, _address: Address) {
        todo!("ahx Not Implemented")
    }

    fn alr(&mut self, address: Address) {
        self.and(address);
        self.lsr(Address::Implied);
    }

    fn anc(&mut self, address: Address) {
        self.and(address);
        self.status.set(StatusFlags::C, self.accumulator >> 7 == 1);
    }

    fn and(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);
            self.accumulator &= value;
            self.set_zero_or_neg_flags(self.accumulator);
        });
    }

    fn arr(&mut self, _address: Address) {
        todo!("arr Not Implemented")
    }

    // TODO: find a way to refactor asl, ror and lsr
    fn asl(&mut self, address: Address) {
        let mut inner = |value: u8| -> u8 {
            self.status.set(StatusFlags::C, value >> 7 == 1);
            let value = value << 1;
            self.status.set(StatusFlags::Z, value == 0);
            self.status
                .set(StatusFlags::N, value & StatusFlags::N.bits() != 0);
            value
        };

        match address {
            Address::Implied => self.accumulator = inner(self.accumulator),
            Address::Absolute(address) => {
                let value = inner(self.bus.read(address));
                self.bus.write(address, value);
            }
            _ => panic!("ASL opcode with relative addressing"),
        }
    }

    fn axs(&mut self, _address: Address) {
        todo!("axs Not Implemented")
    }

    fn branch(&mut self, address: Address, cond: bool) {
        debug_assert_matches!(address,
        Address::Relative(address) => {
            let address = s8_to_u16(address).wrapping_add(self.program_counter);

            if cond {
                if address & 0xff00 != self.program_counter & 0xff00 {
                    self.remaining_cycles += 2;
                } else {
                    self.remaining_cycles += 1;
                }
                self.program_counter = address;
            }
        });
    }

    fn bcc(&mut self, address: Address) {
        self.branch(address, !self.status.contains(StatusFlags::C));
    }

    fn bcs(&mut self, address: Address) {
        self.branch(address, self.status.contains(StatusFlags::C));
    }

    fn beq(&mut self, address: Address) {
        self.branch(address, self.status.contains(StatusFlags::Z));
    }

    fn bit(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);
            let mask = StatusFlags::from_bits_truncate(value);

            self.status.set(StatusFlags::Z, self.accumulator & value == 0);
            self.status.set(StatusFlags::O, mask.contains(StatusFlags::O));
            self.status.set(StatusFlags::N, mask.contains(StatusFlags::N));
        });
    }

    fn bmi(&mut self, address: Address) {
        self.branch(address, self.status.contains(StatusFlags::N));
    }

    fn bne(&mut self, address: Address) {
        self.branch(address, !self.status.contains(StatusFlags::Z));
    }

    fn bpl(&mut self, address: Address) {
        self.branch(address, !self.status.contains(StatusFlags::N));
    }

    fn brk(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status |= StatusFlags::B;
        // TODO: stack manipulation
    }

    fn bvc(&mut self, address: Address) {
        self.branch(address, !self.status.contains(StatusFlags::O));
    }

    fn bvs(&mut self, address: Address) {
        self.branch(address, self.status.contains(StatusFlags::O));
    }

    fn clc(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);
        self.status -= StatusFlags::C;
    }

    fn cld(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status -= StatusFlags::D;
    }

    fn cli(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status -= StatusFlags::I;
    }

    fn clv(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status -= StatusFlags::O;
    }

    fn compare(&mut self, address: Address, register_value: u8) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);

            self.status.set(StatusFlags::C, register_value >= value);

            let cmp = register_value.wrapping_sub(value);
            self.set_zero_or_neg_flags(cmp);
        });
    }

    fn cmp(&mut self, address: Address) {
        self.compare(address, self.accumulator);
    }

    fn cpx(&mut self, address: Address) {
        self.compare(address, self.x_register);
    }

    fn cpy(&mut self, address: Address) {
        self.compare(address, self.y_register);
    }

    fn dcp(&mut self, address: Address) {
        self.dec(address);
        self.cmp(address)
    }

    fn dec(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address).wrapping_sub(1);
            self.set_zero_or_neg_flags(value);
            self.bus.write(address, value);
        });
    }

    fn dex(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.x_register = self.x_register.wrapping_sub(1);
        self.set_zero_or_neg_flags(self.x_register);
    }

    fn dey(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.y_register = self.y_register.wrapping_sub(1);
        self.set_zero_or_neg_flags(self.y_register);
    }

    fn eor(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);
            self.accumulator ^= value;
            self.set_zero_or_neg_flags(self.accumulator);
        });
    }

    fn inc(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address).wrapping_add(1);
            self.set_zero_or_neg_flags(value);
            self.bus.write(address, value);
        });
    }

    fn inx(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.x_register = self.x_register.wrapping_add(1);
        self.set_zero_or_neg_flags(self.x_register);
    }

    fn iny(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.y_register = self.y_register.wrapping_add(1);
        self.set_zero_or_neg_flags(self.y_register);
    }

    fn isc(&mut self, address: Address) {
        self.inc(address);
        self.sbc(address);
    }

    fn jmp(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => self.program_counter = address);
    }

    fn jsr(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            self.push_stack_16(self.program_counter - 1);
            self.program_counter = address;
        });
    }

    fn las(&mut self, _address: Address) {
        todo!("las Not Implemented")
    }

    fn lax(&mut self, address: Address) {
        self.lda(address);
        self.ldx(address);
    }

    fn lda(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            self.accumulator = self.bus.read(address);
            self.set_zero_or_neg_flags(self.accumulator);
        });
    }

    fn ldx(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            self.x_register = self.bus.read(address);
            self.set_zero_or_neg_flags(self.x_register);
        });
    }

    fn ldy(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            self.y_register = self.bus.read(address);
            self.set_zero_or_neg_flags(self.y_register);
        });
    }

    fn lsr(&mut self, address: Address) {
        let mut inner = |value: u8| -> u8 {
            self.status.set(StatusFlags::C, value & 1 == 1);
            let shifted_value = value >> 1;
            self.status.set(StatusFlags::Z, shifted_value == 0);
            self.status.set(StatusFlags::N, false);
            return shifted_value;
        };

        match address {
            Address::Implied => self.accumulator = inner(self.accumulator),
            Address::Absolute(address) => {
                let value = inner(self.bus.read(address));
                self.bus.write(address, value);
            }
            _ => panic!("LSR opcode with relative addressing"),
        }
    }

    fn nop(&mut self, _address: Address) {
        // Do nothing (NOP)
    }

    fn ora(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);
            self.accumulator |= value;
            self.set_zero_or_neg_flags(self.accumulator);
        });
    }

    fn pha(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.push_stack(self.accumulator);
    }

    fn php(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.push_stack((self.status | StatusFlags::B).bits());
    }

    fn pla(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.accumulator = self.pop_stack();
        self.set_zero_or_neg_flags(self.accumulator);
    }

    fn plp(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        let old_status = self.status;
        let mut new_status = StatusFlags::from_bits_truncate(self.pop_stack());

        new_status.set(StatusFlags::B, old_status.contains(StatusFlags::B));
        new_status.set(StatusFlags::X, old_status.contains(StatusFlags::X));

        self.status = new_status;
    }

    fn rla(&mut self, address: Address) {
        self.rol(address);
        self.and(address);
    }

    fn rol(&mut self, address: Address) {
        let mut inner = |value: u8| -> u8 {
            // Save carry flag
            let carry = if self.status.contains(StatusFlags::C) {
                1
            } else {
                0
            };

            self.status.set(StatusFlags::C, value >> 7 == 1);

            let value = value << 1 | carry;

            self.status.set(StatusFlags::Z, value == 0);
            self.status
                .set(StatusFlags::N, value & StatusFlags::N.bits() != 0);
            value
        };

        match address {
            Address::Implied => self.accumulator = inner(self.accumulator),
            Address::Absolute(address) => {
                let value = inner(self.bus.read(address));
                self.bus.write(address, value);
            }
            _ => panic!("ROR opcode with relative addressing"),
        }
    }

    fn ror(&mut self, address: Address) {
        let mut inner = |value: u8| -> u8 {
            // Save carry flag
            let carry = if self.status.contains(StatusFlags::C) {
                1
            } else {
                0
            };

            self.status.set(StatusFlags::C, value & 1 == 1);

            let value = value >> 1 | carry << 7;

            self.status.set(StatusFlags::Z, value == 0);
            self.status
                .set(StatusFlags::N, value & StatusFlags::N.bits() != 0);
            value
        };

        match address {
            Address::Implied => self.accumulator = inner(self.accumulator),
            Address::Absolute(address) => {
                let value = inner(self.bus.read(address));
                self.bus.write(address, value);
            }
            _ => panic!("ROR opcode with relative addressing"),
        }
    }

    fn rra(&mut self, address: Address) {
        self.ror(address);
        self.adc(address);
    }

    fn rti(&mut self, address: Address) {
        self.plp(address);
        self.program_counter = self.pop_stack_16();
    }

    fn rts(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.program_counter = self.pop_stack_16() + 1;
    }

    fn sax(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => self.bus.write(address, self.accumulator & self.x_register));
    }

    fn sbc(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => {
            let value = self.bus.read(address);
            let carry = self.status.contains(StatusFlags::C) as u16;

            let result = u16::from(self.accumulator) + u16::from(!value) + carry;

            let result_u8 = result as u8;

            self.status.set(StatusFlags::C, result > u16::from(u8::max_value()));
            self.status.set(StatusFlags::Z, result_u8 == 0);
            self.status.set(
                StatusFlags::O,
                ((self.accumulator ^ value)
                    & (self.accumulator ^ result_u8)
                    & StatusFlags::N.bits())
                    > 0,
            );

            self.status.set(StatusFlags::N, result_u8 & StatusFlags::N.bits() > 0);

            self.accumulator = result_u8;
        });
    }

    fn sec(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status |= StatusFlags::C;
    }

    fn sed(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status |= StatusFlags::D;
    }

    fn sei(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.status |= StatusFlags::I;
    }

    fn shx(&mut self, _address: Address) {
        todo!("shx Not Implemented")
    }

    fn shy(&mut self, _address: Address) {
        todo!("shy Not Implemented")
    }

    fn slo(&mut self, address: Address) {
        self.asl(address);
        self.ora(address);
    }

    fn sre(&mut self, address: Address) {
        self.lsr(address);
        self.eor(address);
    }

    fn sta(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => self.bus.write(address, self.accumulator));
    }

    fn stx(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => self.bus.write(address, self.x_register));
    }

    fn sty(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Absolute(address) => self.bus.write(address, self.y_register));
    }

    fn tas(&mut self, _address: Address) {
        todo!("tas Not Implemented")
    }

    fn tax(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.x_register = self.accumulator;

        self.set_zero_or_neg_flags(self.x_register);
    }

    fn tay(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.y_register = self.accumulator;

        self.set_zero_or_neg_flags(self.y_register);
    }

    fn tsx(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.x_register = self.stack_pointer;
        self.set_zero_or_neg_flags(self.x_register);
    }

    fn txa(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.accumulator = self.x_register;
        self.set_zero_or_neg_flags(self.x_register);
    }

    fn txs(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.stack_pointer = self.x_register;
    }

    fn tya(&mut self, address: Address) {
        debug_assert_matches!(address, Address::Implied);

        self.accumulator = self.y_register;
        self.set_zero_or_neg_flags(self.y_register);
    }

    fn xaa(&mut self, _address: Address) {
        todo!("xaa Not Implemented")
    }
}

// Stack manipulation functions
impl CPU {
    fn pop_stack(&mut self) -> u8 {
        self.stack_pointer = self.stack_pointer.wrapping_add(1);
        self.bus.read(STACK_PAGE + u16::from(self.stack_pointer))
    }

    fn pop_stack_16(&mut self) -> u16 {
        let lo = u16::from(self.pop_stack());
        let hi = u16::from(self.pop_stack());
        return (hi << 8) | lo;
    }

    fn push_stack_16(&mut self, data: u16) {
        self.push_stack((data >> 8) as u8);
        self.push_stack(data as u8);
    }

    fn push_stack(&mut self, data: u8) {
        self.bus
            .write(STACK_PAGE + u16::from(self.stack_pointer), data);
        self.stack_pointer = self.stack_pointer.wrapping_sub(1);
    }
}

impl CPU {
    fn resolve_address(&self, addressing: AddressingMode) -> Address {
        match addressing {
            AddressingMode::Absolute => self.absolute(0),
            AddressingMode::AbsoluteX => self.absolute(self.x_register),
            AddressingMode::AbsoluteY => self.absolute(self.y_register),
            AddressingMode::Immediate => Address::Absolute(self.program_counter),
            AddressingMode::Implied => Address::Implied,
            AddressingMode::Indirect => self.indirect(),
            AddressingMode::IndirectX => self.indirect_x(),
            AddressingMode::IndirectY => self.indirect_y(),
            AddressingMode::Relative => self.relative(),
            AddressingMode::ZeroPage => self.zero_page(0),
            AddressingMode::ZeroPageX => self.zero_page(self.x_register),
            AddressingMode::ZeroPageY => self.zero_page(self.y_register),
        }
    }

    fn relative(&self) -> Address {
        let relative_address = self.bus.read(self.program_counter);
        Address::Relative(relative_address)
    }

    fn zero_page(&self, offset: u8) -> Address {
        let address = self.bus.read(self.program_counter).wrapping_add(offset);
        Address::Absolute(address as u16)
    }

    fn absolute(&self, offset: u8) -> Address {
        let address = self.bus.read16(self.program_counter);
        let offset_address: u16 = address.wrapping_add(offset as u16);
        Address::Absolute(offset_address)
    }

    fn indirect(&self) -> Address {
        let indirect_address = self.bus.read16(self.program_counter);

        let page = indirect_address & 0xff00;

        let address_hi = u16::from(self.bus.read(page | ((indirect_address + 1) & 0xff))) << 8;
        let address_lo = u16::from(self.bus.read(indirect_address));

        let address = address_hi | address_lo;

        Address::Absolute(address)
    }

    fn indirect_x(&self) -> Address {
        let indirect_address = self
            .bus
            .read(self.program_counter)
            .wrapping_add(self.x_register);
        let indirect_address_plus_one = indirect_address.wrapping_add(1) as u16;

        let address_hi = (self.bus.read(indirect_address_plus_one) as u16) << 8;
        let address_lo = self.bus.read(indirect_address as u16) as u16;

        let address = address_hi | address_lo;

        Address::Absolute(address)
    }

    fn indirect_y(&self) -> Address {
        let indirect_address = self.bus.read(self.program_counter);
        let indirect_address_plus_one = indirect_address.wrapping_add(1) as u16;

        let address_hi = (self.bus.read(indirect_address_plus_one) as u16) << 8;
        let address_lo = self.bus.read(indirect_address as u16) as u16;

        let address = address_hi | address_lo;

        let offset_address = address.wrapping_add(u16::from(self.y_register));

        Address::Absolute(offset_address)
    }
}

#[cfg(test)]
mod tests {

    use super::CPU;

    #[test]
    fn test_simple_program() {
        let program = [
            0xa9, 0x10, // LDA #$10     -> A = #$10
            0x85, 0x20, // STA $20      -> $20 = #$10
            0xa9, 0x01, // LDA #$1      -> A = #$1
            0x65, 0x20, // ADC $20      -> A = #$11
            0x85, 0x21, // STA $21      -> $21=#$11
            0xe6, 0x21, // INC $21      -> $21=#$12
            0xa4, 0x21, // LDY $21      -> Y=#$12
            0xc8, // INY          -> Y=#$13
            0x00, // BRK
        ];

        let mut ram = [0u8; 65536];
        ram[0x0000..program.len()].copy_from_slice(&program);

        let mut cpu = CPU::new(0x00, Box::new(ram));

        // LDA #$10
        cpu.step();

        assert_eq!(cpu.accumulator, 0x10);

        // STA $20
        cpu.step();

        assert_eq!(cpu.bus.read(0x20), 0x10);

        // LDA #$1
        cpu.step();
        assert_eq!(cpu.accumulator, 0x01);

        // ADC $20
        cpu.step();
        assert_eq!(cpu.accumulator, 0x11);

        // STA $21
        cpu.step();
        assert_eq!(cpu.bus.read(0x21), 0x11);

        // INC $21
        cpu.step();
        assert_eq!(cpu.bus.read(0x21), 0x12);

        // LDY $21
        cpu.step();
        assert_eq!(cpu.y_register, 0x12);

        // INY
        cpu.step();
        assert_eq!(cpu.y_register, 0x13);
    }

    #[test]
    fn test_euclid_algo() {
        // From https://github.com/mre/mos6502/blob/master/examples/asm/euclid/euclid.a65
        let program = [
            // .algo
            0xa5, 0x00, // LDA $00
            // .algo_
            0x38, // SEC
            0xe5, 0x01, // SBC $01
            0xf0, 0x07, // BEQ end
            0x30, 0x08, // BMI swap
            0x85, 0x00, // STA $00
            0x4c, 0x12, 0x00, // JMP algo_
            // .end
            0xa5, 0x00, // LDA $00
            0x00, // .swap
            0xa6, 0x00, // LDX $00
            0xa4, 0x01, // LDY $01
            0x86, 0x01, // STX $01
            0x84, 0x00, // STY $00
            0x4c, 0x10, 0x00, // JMP algo
        ];

        let mut ram = [0u8; 65536];
        ram[0x00] = 30;
        ram[0x01] = 20;
        ram[0x10..0x10 + program.len()].copy_from_slice(&program);

        let mut cpu = CPU::new(0x10, Box::new(ram));

        cpu.run_until_brk();

        assert_eq!(10, cpu.accumulator);
    }
}
